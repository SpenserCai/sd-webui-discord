// Code generated by go-swagger; DO NOT EDIT.

package admin

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SetUserPrivateHandlerFunc turns a function with the right signature into a set user private handler
type SetUserPrivateHandlerFunc func(SetUserPrivateParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn SetUserPrivateHandlerFunc) Handle(params SetUserPrivateParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// SetUserPrivateHandler interface for that can handle valid set user private params
type SetUserPrivateHandler interface {
	Handle(SetUserPrivateParams, interface{}) middleware.Responder
}

// NewSetUserPrivate creates a new http.Handler for the set user private operation
func NewSetUserPrivate(ctx *middleware.Context, handler SetUserPrivateHandler) *SetUserPrivate {
	return &SetUserPrivate{Context: ctx, Handler: handler}
}

/*
	SetUserPrivate swagger:route POST /set_user_private admin setUserPrivate

Set User Private
*/
type SetUserPrivate struct {
	Context *middleware.Context
	Handler SetUserPrivateHandler
}

func (o *SetUserPrivate) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewSetUserPrivateParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc.(interface{}) // this is really a interface{}, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// SetUserPrivateBody set user private body
//
// swagger:model SetUserPrivateBody
type SetUserPrivateBody struct {

	// is private
	IsPrivate bool `json:"is_private,omitempty"`

	// user id
	UserID string `json:"user_id,omitempty"`
}

// Validate validates this set user private body
func (o *SetUserPrivateBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this set user private body based on context it is used
func (o *SetUserPrivateBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SetUserPrivateBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SetUserPrivateBody) UnmarshalBinary(b []byte) error {
	var res SetUserPrivateBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
