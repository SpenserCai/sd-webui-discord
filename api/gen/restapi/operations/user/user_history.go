// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/SpenserCai/sd-webui-discord/api/gen/models"
)

// UserHistoryHandlerFunc turns a function with the right signature into a user history handler
type UserHistoryHandlerFunc func(UserHistoryParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn UserHistoryHandlerFunc) Handle(params UserHistoryParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// UserHistoryHandler interface for that can handle valid user history params
type UserHistoryHandler interface {
	Handle(UserHistoryParams, interface{}) middleware.Responder
}

// NewUserHistory creates a new http.Handler for the user history operation
func NewUserHistory(ctx *middleware.Context, handler UserHistoryHandler) *UserHistory {
	return &UserHistory{Context: ctx, Handler: handler}
}

/*
	UserHistory swagger:route POST /user_history user userHistory

Get User History
*/
type UserHistory struct {
	Context *middleware.Context
	Handler UserHistoryHandler
}

func (o *UserHistory) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewUserHistoryParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc.(interface{}) // this is really a interface{}, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// UserHistoryBody user history body
//
// swagger:model UserHistoryBody
type UserHistoryBody struct {

	// page info
	PageInfo *models.PageInfoRequest `json:"page_info,omitempty"`

	// query
	Query *models.HistoryQuery `json:"query,omitempty"`
}

// Validate validates this user history body
func (o *UserHistoryBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePageInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateQuery(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UserHistoryBody) validatePageInfo(formats strfmt.Registry) error {
	if swag.IsZero(o.PageInfo) { // not required
		return nil
	}

	if o.PageInfo != nil {
		if err := o.PageInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "page_info")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "page_info")
			}
			return err
		}
	}

	return nil
}

func (o *UserHistoryBody) validateQuery(formats strfmt.Registry) error {
	if swag.IsZero(o.Query) { // not required
		return nil
	}

	if o.Query != nil {
		if err := o.Query.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "query")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "query")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this user history body based on the context it is used
func (o *UserHistoryBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidatePageInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateQuery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UserHistoryBody) contextValidatePageInfo(ctx context.Context, formats strfmt.Registry) error {

	if o.PageInfo != nil {
		if err := o.PageInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "page_info")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "page_info")
			}
			return err
		}
	}

	return nil
}

func (o *UserHistoryBody) contextValidateQuery(ctx context.Context, formats strfmt.Registry) error {

	if o.Query != nil {
		if err := o.Query.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "query")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "query")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UserHistoryBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UserHistoryBody) UnmarshalBinary(b []byte) error {
	var res UserHistoryBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
